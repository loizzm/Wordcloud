{"ast":null,"code":"var _jsxFileName = \"/home/lms/react/inmotion/src/utils/countdown.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Countdown = props => {\n  _s();\n  // We need ref in this, because we are dealing\n  // with JS setInterval to keep track of it and\n  // stop it when needed\n  const Ref = useRef(null);\n\n  // The state for our timer\n  const [timer, setTimer] = useState('00:00');\n  const getTimeRemaining = e => {\n    const total = Date.parse(e) - Date.parse(new Date());\n    const seconds = Math.floor(total / 1000 % 60);\n    const minutes = Math.floor(total / 1000 / 60 % 60);\n    return {\n      total,\n      minutes,\n      seconds\n    };\n  };\n  const startTimer = e => {\n    let {\n      total,\n      minutes,\n      seconds\n    } = getTimeRemaining(e);\n    if (total >= 0) {\n      // update the timer\n      // check if less than 10 then we need to\n      // add '0' at the beginning of the variable\n      setTimer((minutes > 9 ? minutes : '0' + minutes) + ':' + (seconds > 9 ? seconds : '0' + seconds));\n    }\n  };\n  const clearTimer = e => {\n    // If you adjust it you should also need to\n    // adjust the Endtime formula we are about\n    // to code next   \n    setTimer('02:00');\n\n    // If you try to remove this line the\n    // updating of timer Variable will be\n    // after 1000ms or 1sec\n    if (Ref.current) clearInterval(Ref.current);\n    const id = setInterval(() => {\n      startTimer(e);\n    }, 1000);\n    Ref.current = id;\n  };\n  const getDeadTime = () => {\n    let deadline = new Date();\n\n    // This is where you need to adjust if\n    // you entend to add more time\n    deadline.setMinutes(deadline.getMinutes() + 2);\n    return deadline;\n  };\n\n  // We can use useEffect so that when the component\n  // mount the timer will start as soon as possible\n\n  // We put empty array to act as componentDid\n  // mount only\n  useEffect(() => {\n    clearTimer(getDeadTime());\n  }, []);\n\n  // Another way to call the clearTimer() to start\n  // the countdown is via action event from the\n  // button first we create function to be called\n  // by the button\n  const onClickReset = () => {\n    clearTimer(getDeadTime());\n    props.aoReset();\n  };\n  return /*#__PURE__*/_jsxDEV(\"h2\", {\n    children: timer\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 13\n  }, this);\n};\n_s(Countdown, \"lntBDPYFoyG9AqCUZuzKM9vt7Eg=\");\n_c = Countdown;\nexport default Countdown;\nvar _c;\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Countdown","props","_s","Ref","timer","setTimer","getTimeRemaining","e","total","Date","parse","seconds","Math","floor","minutes","startTimer","clearTimer","current","clearInterval","id","setInterval","getDeadTime","deadline","setMinutes","getMinutes","onClickReset","aoReset","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/lms/react/inmotion/src/utils/countdown.js"],"sourcesContent":["\nimport React, { useState, useRef, useEffect } from 'react'\n \nconst Countdown = (props) => {\n    // We need ref in this, because we are dealing\n    // with JS setInterval to keep track of it and\n    // stop it when needed\n    const Ref = useRef(null);\n \n    // The state for our timer\n    const [timer, setTimer] = useState('00:00');\n \n    const getTimeRemaining = (e) => {\n        const total = Date.parse(e) - Date.parse(new Date());\n        const seconds = Math.floor((total / 1000) % 60);\n        const minutes = Math.floor((total / 1000 / 60) % 60);\n        return {\n            total, minutes, seconds\n        };\n    }\n \n    const startTimer = (e) => {\n        let { total, minutes, seconds }\n                    = getTimeRemaining(e);\n        if (total >= 0) {\n \n            // update the timer\n            // check if less than 10 then we need to\n            // add '0' at the beginning of the variable\n            setTimer(\n                (minutes > 9 ? minutes : '0' + minutes) + ':'\n                + (seconds > 9 ? seconds : '0' + seconds)\n            )\n        }\n    }\n \n    const clearTimer = (e) => {\n \n        // If you adjust it you should also need to\n        // adjust the Endtime formula we are about\n        // to code next   \n        setTimer('02:00');\n \n        // If you try to remove this line the\n        // updating of timer Variable will be\n        // after 1000ms or 1sec\n        if (Ref.current) clearInterval(Ref.current);\n        const id = setInterval(() => {\n            startTimer(e);\n        }, 1000)\n        Ref.current = id;\n    }\n \n    const getDeadTime = () => {\n        let deadline = new Date();\n \n        // This is where you need to adjust if\n        // you entend to add more time\n        deadline.setMinutes(deadline.getMinutes() + 2);\n        return deadline;\n    }\n \n    // We can use useEffect so that when the component\n    // mount the timer will start as soon as possible\n \n    // We put empty array to act as componentDid\n    // mount only\n    useEffect(() => {\n        clearTimer(getDeadTime());\n    }, []);\n \n    // Another way to call the clearTimer() to start\n    // the countdown is via action event from the\n    // button first we create function to be called\n    // by the button\n    const onClickReset = () => {\n        clearTimer(getDeadTime());\n        props.aoReset();\n    }\n \n    return (\n            <h2>{timer}</h2>\n    )\n}\n \nexport default Countdown;"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,SAAS,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACzB;EACA;EACA;EACA,MAAMC,GAAG,GAAGP,MAAM,CAAC,IAAI,CAAC;;EAExB;EACA,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,OAAO,CAAC;EAE3C,MAAMW,gBAAgB,GAAIC,CAAC,IAAK;IAC5B,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACH,CAAC,CAAC,GAAGE,IAAI,CAACC,KAAK,CAAC,IAAID,IAAI,CAAC,CAAC,CAAC;IACpD,MAAME,OAAO,GAAGC,IAAI,CAACC,KAAK,CAAEL,KAAK,GAAG,IAAI,GAAI,EAAE,CAAC;IAC/C,MAAMM,OAAO,GAAGF,IAAI,CAACC,KAAK,CAAEL,KAAK,GAAG,IAAI,GAAG,EAAE,GAAI,EAAE,CAAC;IACpD,OAAO;MACHA,KAAK;MAAEM,OAAO;MAAEH;IACpB,CAAC;EACL,CAAC;EAED,MAAMI,UAAU,GAAIR,CAAC,IAAK;IACtB,IAAI;MAAEC,KAAK;MAAEM,OAAO;MAAEH;IAAQ,CAAC,GACjBL,gBAAgB,CAACC,CAAC,CAAC;IACjC,IAAIC,KAAK,IAAI,CAAC,EAAE;MAEZ;MACA;MACA;MACAH,QAAQ,CACJ,CAACS,OAAO,GAAG,CAAC,GAAGA,OAAO,GAAG,GAAG,GAAGA,OAAO,IAAI,GAAG,IAC1CH,OAAO,GAAG,CAAC,GAAGA,OAAO,GAAG,GAAG,GAAGA,OAAO,CAC5C,CAAC;IACL;EACJ,CAAC;EAED,MAAMK,UAAU,GAAIT,CAAC,IAAK;IAEtB;IACA;IACA;IACAF,QAAQ,CAAC,OAAO,CAAC;;IAEjB;IACA;IACA;IACA,IAAIF,GAAG,CAACc,OAAO,EAAEC,aAAa,CAACf,GAAG,CAACc,OAAO,CAAC;IAC3C,MAAME,EAAE,GAAGC,WAAW,CAAC,MAAM;MACzBL,UAAU,CAACR,CAAC,CAAC;IACjB,CAAC,EAAE,IAAI,CAAC;IACRJ,GAAG,CAACc,OAAO,GAAGE,EAAE;EACpB,CAAC;EAED,MAAME,WAAW,GAAGA,CAAA,KAAM;IACtB,IAAIC,QAAQ,GAAG,IAAIb,IAAI,CAAC,CAAC;;IAEzB;IACA;IACAa,QAAQ,CAACC,UAAU,CAACD,QAAQ,CAACE,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC;IAC9C,OAAOF,QAAQ;EACnB,CAAC;;EAED;EACA;;EAEA;EACA;EACAzB,SAAS,CAAC,MAAM;IACZmB,UAAU,CAACK,WAAW,CAAC,CAAC,CAAC;EAC7B,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;EACA;EACA,MAAMI,YAAY,GAAGA,CAAA,KAAM;IACvBT,UAAU,CAACK,WAAW,CAAC,CAAC,CAAC;IACzBpB,KAAK,CAACyB,OAAO,CAAC,CAAC;EACnB,CAAC;EAED,oBACQ3B,OAAA;IAAA4B,QAAA,EAAKvB;EAAK;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAE5B,CAAC;AAAA7B,EAAA,CAhFKF,SAAS;AAAAgC,EAAA,GAAThC,SAAS;AAkFf,eAAeA,SAAS;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}